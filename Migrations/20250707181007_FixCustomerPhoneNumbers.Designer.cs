// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sky_webapi.Data;

#nullable disable

namespace sky_webapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250707181007_FixCustomerPhoneNumbers")]
    partial class FixCustomerPhoneNumbers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000001",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000002",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000003",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.AllPlantEntity", b =>
                {
                    b.Property<int>("PlantNameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantNameID"));

                    b.Property<string>("NormalPrice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlantCategory")
                        .HasColumnType("int");

                    b.Property<string>("PlantDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlantNameID");

                    b.HasIndex("PlantCategory");

                    b.HasIndex("PlantDescription")
                        .IsUnique()
                        .HasFilter("[PlantDescription] IS NOT NULL");

                    b.ToTable("AllPlant");

                    b.HasData(
                        new
                        {
                            PlantNameID = 1,
                            NormalPrice = "150.00",
                            PlantCategory = 1,
                            PlantDescription = "Excavator 2T"
                        },
                        new
                        {
                            PlantNameID = 2,
                            NormalPrice = "95.00",
                            PlantCategory = 3,
                            PlantDescription = "Scissor Lift"
                        },
                        new
                        {
                            PlantNameID = 3,
                            NormalPrice = "45.00",
                            PlantCategory = 2,
                            PlantDescription = "Concrete Mixer"
                        },
                        new
                        {
                            PlantNameID = 4,
                            NormalPrice = "25.00",
                            PlantCategory = 4,
                            PlantDescription = "Power Drill"
                        },
                        new
                        {
                            PlantNameID = 5,
                            NormalPrice = "15.00",
                            PlantCategory = 5,
                            PlantDescription = "Safety Harness"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000001",
                            Email = "admin@skyapp.com",
                            EmailConfirmed = true,
                            IsCustomer = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SKYAPP.COM",
                            NormalizedUserName = "ADMIN@SKYAPP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFMsm6S3sBGLhcB3Bnr7P/jBFqtYhIbz9pXnrGg+1YmOvhr2eXbO5yGDYJolviK1hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000001",
                            TwoFactorEnabled = false,
                            UserName = "admin@skyapp.com"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("CustID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactFirstNames")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustID = 1,
                            CompanyName = "Company A",
                            ContactFirstNames = "John",
                            ContactSurname = "Doe",
                            ContactTitle = "Mr.",
                            Email = "john.doe@companya.com",
                            Fax = "01234 567890",
                            Line1 = "123 Main St",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "SO14 1KX",
                            Telephone = "07123 456789"
                        },
                        new
                        {
                            CustID = 2,
                            CompanyName = "Company B",
                            ContactFirstNames = "Jane",
                            ContactSurname = "Smith",
                            ContactTitle = "Ms.",
                            Email = "jane.smith@companyb.com",
                            Fax = "01345 678901",
                            Line1 = "456 Oak Ave",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "PL4 6LU",
                            Telephone = "07234 567890"
                        },
                        new
                        {
                            CustID = 3,
                            CompanyName = "Company C",
                            ContactFirstNames = "Mike",
                            ContactSurname = "Johnson",
                            ContactTitle = "Mr.",
                            Email = "mike.johnson@companyc.com",
                            Fax = "01456 789012",
                            Line1 = "789 Pine Rd",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "PO1 8VI",
                            Telephone = "07345 678901"
                        },
                        new
                        {
                            CustID = 4,
                            CompanyName = "Company D",
                            ContactFirstNames = "Sarah",
                            ContactSurname = "Williams",
                            ContactTitle = "Mrs.",
                            Email = "sarah.williams@companyd.com",
                            Fax = "01567 890123",
                            Line1 = "321 Elm St",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "CT3 8AB",
                            Telephone = "07456 789012"
                        },
                        new
                        {
                            CustID = 5,
                            CompanyName = "Company E",
                            ContactFirstNames = "David",
                            ContactSurname = "Brown",
                            ContactTitle = "Mr.",
                            Email = "david.brown@companye.com",
                            Fax = "01678 901234",
                            Line1 = "654 Maple Dr",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "TR2 7VM",
                            Telephone = "07567 890123"
                        },
                        new
                        {
                            CustID = 6,
                            CompanyName = "Company F",
                            ContactFirstNames = "Lisa",
                            ContactSurname = "Davis",
                            ContactTitle = "Ms.",
                            Email = "lisa.davis@companyf.com",
                            Fax = "01789 012345",
                            Line1 = "987 Cedar Ln",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "SW1 5RZ",
                            Telephone = "07678 901234"
                        },
                        new
                        {
                            CustID = 7,
                            CompanyName = "Company G",
                            ContactFirstNames = "Robert",
                            ContactSurname = "Miller",
                            ContactTitle = "Mr.",
                            Email = "robert.miller@companyg.com",
                            Fax = "01890 123456",
                            Line1 = "147 Birch Way",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "SW9 1JP",
                            Telephone = "07789 012345"
                        },
                        new
                        {
                            CustID = 8,
                            CompanyName = "Company H",
                            ContactFirstNames = "Jennifer",
                            ContactSurname = "Wilson",
                            ContactTitle = "Mrs.",
                            Email = "jennifer.wilson@companyh.com",
                            Fax = "01901 234567",
                            Line1 = "258 Spruce St",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "SW2 9FA",
                            Telephone = "07890 123456"
                        },
                        new
                        {
                            CustID = 9,
                            CompanyName = "Company I",
                            ContactFirstNames = "Michael",
                            ContactSurname = "Moore",
                            ContactTitle = "Mr.",
                            Email = "michael.moore@companyi.com",
                            Fax = "01012 345678",
                            Line1 = "369 Willow Ave",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "PO3 8UT",
                            Telephone = "07901 234567"
                        },
                        new
                        {
                            CustID = 10,
                            CompanyName = "Company J",
                            ContactFirstNames = "Amanda",
                            ContactSurname = "Taylor",
                            ContactTitle = "Ms.",
                            Email = "amanda.taylor@companyj.com",
                            Fax = "01123 456789",
                            Line1 = "741 Poplar Rd",
                            Line2 = "",
                            Line3 = "",
                            Line4 = "",
                            Postcode = "PL4 9DV",
                            Telephone = "07012 345678"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Inspection", b =>
                {
                    b.Property<int>("UniqueRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueRef"));

                    b.Property<string>("Defects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoldingID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InspectorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LatestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiscNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rectified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafeWorking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueRef");

                    b.HasIndex("HoldingID");

                    b.HasIndex("InspectorID");

                    b.ToTable("Inspections");

                    b.HasData(
                        new
                        {
                            UniqueRef = 1,
                            Defects = "None",
                            HoldingID = 1,
                            InspectionDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InspectorID = 2,
                            LatestDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Site 1",
                            MiscNotes = "Annual inspection for plant holding 1",
                            PreviousCheck = "N/A",
                            RecentCheck = "Completed",
                            Rectified = "N/A",
                            SafeWorking = "Yes",
                            TestDetails = "Standard inspection completed"
                        },
                        new
                        {
                            UniqueRef = 2,
                            Defects = "None",
                            HoldingID = 2,
                            InspectionDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InspectorID = 1,
                            LatestDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Site 2",
                            MiscNotes = "Annual inspection for plant holding 2",
                            PreviousCheck = "N/A",
                            RecentCheck = "Completed",
                            Rectified = "N/A",
                            SafeWorking = "Yes",
                            TestDetails = "Standard inspection completed"
                        },
                        new
                        {
                            UniqueRef = 3,
                            Defects = "None",
                            HoldingID = 3,
                            InspectionDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InspectorID = 2,
                            LatestDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Site 3",
                            MiscNotes = "Annual inspection for plant holding 3",
                            PreviousCheck = "N/A",
                            RecentCheck = "Completed",
                            Rectified = "N/A",
                            SafeWorking = "Yes",
                            TestDetails = "Standard inspection completed"
                        },
                        new
                        {
                            UniqueRef = 4,
                            Defects = "None",
                            HoldingID = 4,
                            InspectionDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InspectorID = 1,
                            LatestDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Site 4",
                            MiscNotes = "Annual inspection for plant holding 4",
                            PreviousCheck = "N/A",
                            RecentCheck = "Completed",
                            Rectified = "N/A",
                            SafeWorking = "Yes",
                            TestDetails = "Standard inspection completed"
                        },
                        new
                        {
                            UniqueRef = 5,
                            Defects = "None",
                            HoldingID = 5,
                            InspectionDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InspectorID = 2,
                            LatestDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Site 5",
                            MiscNotes = "Annual inspection for plant holding 5",
                            PreviousCheck = "N/A",
                            RecentCheck = "Completed",
                            Rectified = "N/A",
                            SafeWorking = "Yes",
                            TestDetails = "Standard inspection completed"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.InspectorEntity", b =>
                {
                    b.Property<int>("InspectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectorID"));

                    b.Property<string>("InspectorsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InspectorID");

                    b.ToTable("Inspectors");

                    b.HasData(
                        new
                        {
                            InspectorID = 1,
                            InspectorsName = "Allen Lee"
                        },
                        new
                        {
                            InspectorID = 2,
                            InspectorsName = "Aidan Lee"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Ledger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceRef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReferenceWithoutInitials")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(450)")
                        .HasComputedColumnSql("CAST(SUBSTRING(InvoiceRef, CHARINDEX('/', InvoiceRef), LEN(InvoiceRef) - CHARINDEX('/', InvoiceRef) + 1) AS nvarchar(100))", true);

                    b.Property<bool>("Settled")
                        .HasColumnType("bit");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VAT")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceWithoutInitials")
                        .IsUnique();

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.NoteEntity", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteID"));

                    b.Property<int?>("CustID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteID");

                    b.HasIndex("CustID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.PlantCategoryEntity", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MultiInspect")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("PlantCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryDescription = "Heavy Plant",
                            MultiInspect = false
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryDescription = "Small Plant",
                            MultiInspect = false
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryDescription = "Access Equipment",
                            MultiInspect = false
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryDescription = "Power Tools",
                            MultiInspect = false
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryDescription = "Safety Equipment",
                            MultiInspect = false
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.PlantHolding", b =>
                {
                    b.Property<int>("HoldingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HoldingID"));

                    b.Property<int?>("CustID")
                        .HasColumnType("int");

                    b.Property<decimal?>("InspectionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InspectionFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("PlantNameID")
                        .HasColumnType("int");

                    b.Property<string>("SWL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("HoldingID");

                    b.HasIndex("CustID");

                    b.HasIndex("PlantNameID");

                    b.HasIndex("StatusID");

                    b.ToTable("PlantHoldings");

                    b.HasData(
                        new
                        {
                            HoldingID = 1,
                            CustID = 1,
                            InspectionFee = 105m,
                            InspectionFrequency = 12,
                            PlantNameID = 2,
                            SWL = "500kg",
                            SerialNumber = "B2D4F6H8J0",
                            StatusID = 2
                        },
                        new
                        {
                            HoldingID = 2,
                            CustID = 2,
                            InspectionFee = 170m,
                            InspectionFrequency = 12,
                            PlantNameID = 3,
                            SWL = "300kg",
                            SerialNumber = "C3E5G7I9K1",
                            StatusID = 3
                        },
                        new
                        {
                            HoldingID = 3,
                            CustID = 3,
                            InspectionFee = 110m,
                            InspectionFrequency = 12,
                            PlantNameID = 4,
                            SWL = "N/A",
                            SerialNumber = "D4F6H8J0L2",
                            StatusID = 4
                        },
                        new
                        {
                            HoldingID = 4,
                            CustID = 4,
                            InspectionFee = 175m,
                            InspectionFrequency = 12,
                            PlantNameID = 5,
                            SWL = "150kg",
                            SerialNumber = "E5G7I9K1M3",
                            StatusID = 5
                        },
                        new
                        {
                            HoldingID = 5,
                            CustID = 5,
                            InspectionFee = 115m,
                            InspectionFrequency = 12,
                            PlantNameID = 1,
                            SWL = "2000kg",
                            SerialNumber = "F6H8J0L2N4",
                            StatusID = 1
                        },
                        new
                        {
                            HoldingID = 6,
                            CustID = 6,
                            InspectionFee = 180m,
                            InspectionFrequency = 12,
                            PlantNameID = 2,
                            SWL = "500kg",
                            SerialNumber = "G7I9K1M3O5",
                            StatusID = 2
                        },
                        new
                        {
                            HoldingID = 7,
                            CustID = 7,
                            InspectionFee = 120m,
                            InspectionFrequency = 12,
                            PlantNameID = 3,
                            SWL = "300kg",
                            SerialNumber = "H8J0L2N4P6",
                            StatusID = 3
                        },
                        new
                        {
                            HoldingID = 8,
                            CustID = 8,
                            InspectionFee = 185m,
                            InspectionFrequency = 12,
                            PlantNameID = 4,
                            SWL = "N/A",
                            SerialNumber = "I9K1M3O5Q7",
                            StatusID = 4
                        },
                        new
                        {
                            HoldingID = 9,
                            CustID = 9,
                            InspectionFee = 125m,
                            InspectionFrequency = 12,
                            PlantNameID = 5,
                            SWL = "150kg",
                            SerialNumber = "J0L2N4P6R8",
                            StatusID = 5
                        },
                        new
                        {
                            HoldingID = 10,
                            CustID = 10,
                            InspectionFee = 190m,
                            InspectionFrequency = 12,
                            PlantNameID = 1,
                            SWL = "2000kg",
                            SerialNumber = "K1M3O5Q7S9",
                            StatusID = 1
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.RevokedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RevokedTokens");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.ScheduledInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HoldingID")
                        .HasColumnType("int");

                    b.Property<int?>("InspectorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HoldingID");

                    b.HasIndex("InspectorID");

                    b.ToTable("ScheduledInspections");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusDescription = "Available"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusDescription = "In Use"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusDescription = "Under Maintenance"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusDescription = "Out of Service"
                        },
                        new
                        {
                            StatusID = 5,
                            StatusDescription = "Reserved"
                        });
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Summaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Freezing"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bracing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Chilly"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cool"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Mild"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Warm"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Balmy"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Hot"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sweltering"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Scorching"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sky_webapi.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.AllPlantEntity", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.PlantCategoryEntity", "Category")
                        .WithMany("plant")
                        .HasForeignKey("PlantCategory")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Inspection", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.PlantHolding", "PlantHolding")
                        .WithMany()
                        .HasForeignKey("HoldingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sky_webapi.Data.Entities.InspectorEntity", "Inspector")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Inspector");

                    b.Navigation("PlantHolding");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.NoteEntity", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.CustomerEntity", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.PlantHolding", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sky_webapi.Data.Entities.AllPlantEntity", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantNameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sky_webapi.Data.Entities.Status", "Status")
                        .WithMany("PlantHoldings")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("Plant");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.ScheduledInspection", b =>
                {
                    b.HasOne("sky_webapi.Data.Entities.PlantHolding", "PlantHolding")
                        .WithMany()
                        .HasForeignKey("HoldingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sky_webapi.Data.Entities.InspectorEntity", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Inspector");

                    b.Navigation("PlantHolding");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.InspectorEntity", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.PlantCategoryEntity", b =>
                {
                    b.Navigation("plant");
                });

            modelBuilder.Entity("sky_webapi.Data.Entities.Status", b =>
                {
                    b.Navigation("PlantHoldings");
                });
#pragma warning restore 612, 618
        }
    }
}
